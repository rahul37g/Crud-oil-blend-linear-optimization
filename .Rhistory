ncol = length(gasoline$Octane_Rating), byrow = TRUE)
## part 3 final matrix for fuel quantity
constraint3 <- cbind(fuel_quantity1, fuel_quantity2)
## Final matrix constraint required for optimization.
mat <- rbind(constraint1,
constraint2,
constraint3)
## RHS for the constraints
rhs <- c(zeros(1,length(gasoline$Price)),
raw_material$Avalibality,
zeros(1, length(gasoline$Octane_Rating)))
## Constraints direction
dir  <- c(rep(">=", length(gasoline$Price)),
rep("==", length(raw_material$Avalibality)),
rep("==", length(gasoline$Octane_Rating)))
## solve using Rglpk package for linear programming solver
optimum <- Rglpk_solve_LP(obj, mat, dir, rhs, max = FALSE)
## Find the optimal solution
optimum$solution # Display the optimum values for x1 and x2 and others
optimum$optimum # Check the value of objective function at optimal point
# set fuel_used variable to store the result of gasoline used, obtain from optimum$solution
fuel_used <- data.frame(gasoline$Gasoline, tail(optimum$solution, length(gasoline$Gasoline)))
colnames(fuel_used) <- c("Fuel", "Used_Fuel")
# set revenue variable to store the result of objective function at optimal point
revenue <- data.frame("Revenue"=format(sum(tail(optimum$solution,length(gasoline$Gasoline))*gasoline$Price),
big.mark=",",scientific=FALSE))
# revenue <- data.frame("Revenue" = format(optimum$optimum,big.mark=",",scientific=FALSE))
# set df blend_dist to save on .csv format, which contains the final result of blending process
blend_dist <- data.frame(matrix(
c(raw_material$Octane_Rating,
as.numeric(format(round(optimum$solution[1:(length(raw_material$Octane_Rating)*length(gasoline$Gasoline))])))),
nrow = length(raw_material$Octane_Rating)))
if(length(gasoline$Gasoline) > 1){
blend_dist <- cbind(blend_dist, rowSums(blend_dist[, -1]))
colnames(blend_dist) <- c("Octane_Rating",paste("Fuel_",as.character(gasoline$Gasoline), sep = ""), "Total")
} else {
colnames(blend_dist) <- c("Octane_Rating",paste("Fuel_",as.character(gasoline$Gasoline), sep = ""))
}
# write dataframe in .csv format for blend_graph, fuel_used and revenue
# library(xlsx)
# wb <- loadWorkbook("oil_blend_lp.xlsx")
# sheets <- getSheets(wb)
# removeSheet(wb, sheetName="blend_result")
# mysheet <- createSheet(wb, sheetName="blend_result")
# addDataFrame(blend_dist, mysheet, row.names = FALSE, col.names = TRUE)
# addDataFrame(fuel_used, mysheet, row.names = FALSE, col.names = TRUE, startRow = length(blend_dist$Octane_Rating)+3)
# addDataFrame(revenue, mysheet, row.names = FALSE, col.names = TRUE,
#              startRow = (length(blend_dist$Octane_Rating)+1) + (length(fuel_used$Fuel)+1)+3)
# saveWorkbook(wb, "oil_blend_lp.xlsx")
library(xlsx) # read, write, format Excel.
wb <- loadWorkbook("oil_blend_lp.xlsx")
sheets <- getSheets(wb)
if ("blend_result" %in% names(sheets)) {
removeSheet(wb, sheetName="blend_result")
mysheet <- createSheet(wb, sheetName="blend_result")
} else {
mysheet <- createSheet(wb, sheetName="blend_result")
}
addDataFrame(blend_dist, mysheet, row.names = FALSE, col.names = TRUE)
addDataFrame(fuel_used, mysheet, row.names = FALSE, col.names = TRUE, startRow = length(blend_dist$Octane_Rating)+3)
addDataFrame(revenue, mysheet, row.names = FALSE, col.names = TRUE,
startRow = (length(blend_dist$Octane_Rating)+1) + (length(fuel_used$Fuel)+1)+3)
saveWorkbook(wb, "oil_blend_lp.xlsx")
# created df blend_graph according to ggplot2 requirements
blend_graph <- data.frame(rep(gasoline$Gasoline, each = length(raw_material$Avalibality)),
as.numeric(rep(raw_material$Octane_Rating,time=length(gasoline$Gasoline))),
as.numeric(format(round(optimum$solution[1:(length(raw_material$Octane_Rating)*length(gasoline$Gasoline))]))))
colnames(blend_graph) <- c("Fuel","Octane_Rating","Used_Fuel")
## plot ggplot2 graph for blending process
ggplotly(ggplot(blend_graph, aes(Octane_Rating, Used_Fuel, fill=Fuel)) +
theme(panel.grid.major = element_line(color = "#a09d9a")) +
# facet_wrap(~ Fuel) +
geom_bar(stat='identity', position = 'dodge') +
labs(x = "Ocatane Rating",y = "Fuel Used for Blending",
title = "Blending") +
scale_x_discrete(limits=raw_material$Octane_Rating))
# save plot in png format
ggsave("blend_graph.png")
# Display the final result of blending process along with the revenue
print(blend_dist, print.gap=2, row.names=F)
print(fuel_used, print.gap=2, row.names=F)
print(revenue, print.gap=2, row.names=F)
rm(list = ls()) # clear gobal environment
# gasoline <- na.omit(read.csv("oil_blend_lp.csv", nrow = 29, header = TRUE))
gasoline <- read.xlsx("oil_blend_lp.xlsx",sheetName = "oil_blend_lp", startRow = 1, endRow = 30)
gasoline <- subset(gasoline, Select == "YES"); gasoline$Select <- NULL
# raw_material <- na.omit(read.csv("oil_blend_lp.csv", nrow = 38, skip = 30, header = TRUE))
raw_material <- read.xlsx("oil_blend_lp.xlsx",sheetName = "oil_blend_lp", startRow = 31, endRow = 69)
raw_material <- subset(raw_material, Select == "YES"); raw_material$Select <- NULL
obj  <- c(rep(0,length(raw_material$Octane_Rating)*length(gasoline$Gasoline)),
raw_material$Avalibality,
gasoline$Price)
# obj <- c(0, 0, 0, 0, 0, 0, 28.5)
## set constraint martix
## Constraint matrix is divided into 3 parts:
## 1. Part 1: matrix constraint for oil qualitiy.
## Part 1 (a):
fuel_quality1=c()
for (row in 1:length(gasoline$Gasoline)) {
for (col in 1:(length(gasoline$Gasoline)+1)) {
if(row == col){
fuel_quality1<-append(fuel_quality1, -raw_material$Octane_Rating)
}
else{
fuel_quality1<-append(fuel_quality1, rep(0,length(raw_material$Octane_Rating)))
}
}
}
fuel_quality1 <- matrix(fuel_quality1, nrow = length(gasoline$Gasoline),
ncol = length(raw_material$Octane_Rating)*(length(gasoline$Gasoline)+1),
byrow = TRUE)
## Part 1 (b):
fuel_quality2=c()
for (row in 1:length(gasoline$Gasoline)) {
for (col in 1:length(gasoline$Gasoline)) {
if(row == col){
fuel_quality2<-append(fuel_quality2, gasoline$Octane_Rating[row])
}
else{
fuel_quality2<-append(fuel_quality2, 0)
}
}
}
fuel_quality2 <- matrix(fuel_quality2, nrow = length(gasoline$Gasoline),
ncol = length(gasoline$Octane_Rating), byrow = TRUE)
## part 1 final matrix for fuel quality
constraint1 <- cbind(fuel_quality1,fuel_quality2)
## 2. Part 2: matrix constraint for oil availability.
constraint2 <- matrix(c(rep(eye(length(raw_material$Octane_Rating)),length(gasoline$Gasoline)+1),
zeros(length(raw_material$Octane_Rating),length(gasoline$Octane_Rating))),
nrow = length(raw_material$Octane_Rating),
ncol = (length(raw_material$Octane_Rating) * (length(gasoline$Gasoline)+1)) +
length(gasoline$Gasoline))
## 3. Part 3: matrix constraint for oil quantity.
#* Part 3 (a):
fuel_quantity1=c()
for (row in 1:length(gasoline$Gasoline)) {
for (col in 1:(length(gasoline$Gasoline)+1)) {
if(row == col){
fuel_quantity1<-append(fuel_quantity1,rep(1,length(raw_material$Octane_Rating)))
}
else{
fuel_quantity1<-append(fuel_quantity1,rep(0,length(raw_material$Octane_Rating)))
}
}
}
fuel_quantity1 <- matrix(fuel_quantity1, nrow = length(gasoline$Gasoline),
ncol = length(raw_material$Octane_Rating)*(length(gasoline$Gasoline)+1),
byrow = TRUE)
## Part 3 (b):
fuel_quantity2=c()
for (row in 1:length(gasoline$Gasoline)) {
for (col in 1:length(gasoline$Gasoline)) {
if(row == col){
fuel_quantity2<-append(fuel_quantity2, -1)
}
else{
fuel_quantity2<-append(fuel_quantity2, 0)
}
}
}
fuel_quantity2 <- matrix(fuel_quantity2, nrow = length(gasoline$Gasoline),
ncol = length(gasoline$Octane_Rating), byrow = TRUE)
## part 3 final matrix for fuel quantity
constraint3 <- cbind(fuel_quantity1, fuel_quantity2)
## Final matrix constraint required for optimization.
mat <- rbind(constraint1,
constraint2,
constraint3)
## RHS for the constraints
rhs <- c(zeros(1,length(gasoline$Price)),
raw_material$Avalibality,
zeros(1, length(gasoline$Octane_Rating)))
## Constraints direction
dir  <- c(rep(">=", length(gasoline$Price)),
rep("==", length(raw_material$Avalibality)),
rep("==", length(gasoline$Octane_Rating)))
## solve using Rglpk package for linear programming solver
optimum <- Rglpk_solve_LP(obj, mat, dir, rhs, max = FALSE)
## Find the optimal solution
optimum$solution # Display the optimum values for x1 and x2 and others
optimum$optimum # Check the value of objective function at optimal point
# set fuel_used variable to store the result of gasoline used, obtain from optimum$solution
fuel_used <- data.frame(gasoline$Gasoline, tail(optimum$solution, length(gasoline$Gasoline)))
colnames(fuel_used) <- c("Fuel", "Used_Fuel")
# set revenue variable to store the result of objective function at optimal point
revenue <- data.frame("Revenue"=format(sum(tail(optimum$solution,length(gasoline$Gasoline))*gasoline$Price),
big.mark=",",scientific=FALSE))
# revenue <- data.frame("Revenue" = format(optimum$optimum,big.mark=",",scientific=FALSE))
# set df blend_dist to save on .csv format, which contains the final result of blending process
blend_dist <- data.frame(matrix(
c(raw_material$Octane_Rating,
as.numeric(format(round(optimum$solution[1:(length(raw_material$Octane_Rating)*length(gasoline$Gasoline))])))),
nrow = length(raw_material$Octane_Rating)))
if(length(gasoline$Gasoline) > 1){
blend_dist <- cbind(blend_dist, rowSums(blend_dist[, -1]))
colnames(blend_dist) <- c("Octane_Rating",paste("Fuel_",as.character(gasoline$Gasoline), sep = ""), "Total")
} else {
colnames(blend_dist) <- c("Octane_Rating",paste("Fuel_",as.character(gasoline$Gasoline), sep = ""))
}
# write dataframe in .csv format for blend_graph, fuel_used and revenue
# library(xlsx)
# wb <- loadWorkbook("oil_blend_lp.xlsx")
# sheets <- getSheets(wb)
# removeSheet(wb, sheetName="blend_result")
# mysheet <- createSheet(wb, sheetName="blend_result")
# addDataFrame(blend_dist, mysheet, row.names = FALSE, col.names = TRUE)
# addDataFrame(fuel_used, mysheet, row.names = FALSE, col.names = TRUE, startRow = length(blend_dist$Octane_Rating)+3)
# addDataFrame(revenue, mysheet, row.names = FALSE, col.names = TRUE,
#              startRow = (length(blend_dist$Octane_Rating)+1) + (length(fuel_used$Fuel)+1)+3)
# saveWorkbook(wb, "oil_blend_lp.xlsx")
library(xlsx) # read, write, format Excel.
wb <- loadWorkbook("oil_blend_lp.xlsx")
sheets <- getSheets(wb)
if ("blend_result" %in% names(sheets)) {
removeSheet(wb, sheetName="blend_result")
mysheet <- createSheet(wb, sheetName="blend_result")
} else {
mysheet <- createSheet(wb, sheetName="blend_result")
}
addDataFrame(blend_dist, mysheet, row.names = FALSE, col.names = TRUE)
addDataFrame(fuel_used, mysheet, row.names = FALSE, col.names = TRUE, startRow = length(blend_dist$Octane_Rating)+3)
addDataFrame(revenue, mysheet, row.names = FALSE, col.names = TRUE,
startRow = (length(blend_dist$Octane_Rating)+1) + (length(fuel_used$Fuel)+1)+3)
saveWorkbook(wb, "oil_blend_lp.xlsx")
# created df blend_graph according to ggplot2 requirements
blend_graph <- data.frame(rep(gasoline$Gasoline, each = length(raw_material$Avalibality)),
as.numeric(rep(raw_material$Octane_Rating,time=length(gasoline$Gasoline))),
as.numeric(format(round(optimum$solution[1:(length(raw_material$Octane_Rating)*length(gasoline$Gasoline))]))))
colnames(blend_graph) <- c("Fuel","Octane_Rating","Used_Fuel")
## plot ggplot2 graph for blending process
ggplotly(ggplot(blend_graph, aes(Octane_Rating, Used_Fuel, fill=Fuel)) +
theme(panel.grid.major = element_line(color = "#a09d9a")) +
# facet_wrap(~ Fuel) +
geom_bar(stat='identity', position = 'dodge') +
labs(x = "Ocatane Rating",y = "Fuel Used for Blending",
title = "Blending") +
scale_x_discrete(limits=raw_material$Octane_Rating))
# save plot in png format
ggsave("blend_graph.png")
# Display the final result of blending process along with the revenue
print(blend_dist, print.gap=2, row.names=F)
print(fuel_used, print.gap=2, row.names=F)
print(revenue, print.gap=2, row.names=F)
View(gasoline)
(11375*26.5)+(6625*31.5)
mat
mat
dir
rhs
obj
print(blend_dist, print.gap=2, row.names=F)
print(fuel_used, print.gap=2, row.names=F)
print(revenue, print.gap=2, row.names=F)
rm(list = ls()) # clear gobal environment
# gasoline <- na.omit(read.csv("oil_blend_lp.csv", nrow = 29, header = TRUE))
gasoline <- read.xlsx("oil_blend_lp.xlsx",sheetName = "oil_blend_lp", startRow = 1, endRow = 30)
gasoline <- subset(gasoline, Select == "YES"); gasoline$Select <- NULL
# raw_material <- na.omit(read.csv("oil_blend_lp.csv", nrow = 38, skip = 30, header = TRUE))
raw_material <- read.xlsx("oil_blend_lp.xlsx",sheetName = "oil_blend_lp", startRow = 31, endRow = 69)
raw_material <- subset(raw_material, Select == "YES"); raw_material$Select <- NULL
obj  <- c(rep(0,length(raw_material$Octane_Rating)*length(gasoline$Gasoline)),
raw_material$Avalibality,
gasoline$Price)
## set constraint martix
## Constraint matrix is divided into 3 parts:
## 1. Part 1: matrix constraint for oil qualitiy.
## Part 1 (a):
fuel_quality1=c()
for (row in 1:length(gasoline$Gasoline)) {
for (col in 1:(length(gasoline$Gasoline)+1)) {
if(row == col){
fuel_quality1<-append(fuel_quality1, -raw_material$Octane_Rating)
}
else{
fuel_quality1<-append(fuel_quality1, rep(0,length(raw_material$Octane_Rating)))
}
}
}
fuel_quality1 <- matrix(fuel_quality1, nrow = length(gasoline$Gasoline),
ncol = length(raw_material$Octane_Rating)*(length(gasoline$Gasoline)+1),
byrow = TRUE)
## Part 1 (b):
fuel_quality2=c()
for (row in 1:length(gasoline$Gasoline)) {
for (col in 1:length(gasoline$Gasoline)) {
if(row == col){
fuel_quality2<-append(fuel_quality2, gasoline$Octane_Rating[row])
}
else{
fuel_quality2<-append(fuel_quality2, 0)
}
}
}
fuel_quality2 <- matrix(fuel_quality2, nrow = length(gasoline$Gasoline),
ncol = length(gasoline$Octane_Rating), byrow = TRUE)
## part 1 final matrix for fuel quality
constraint1 <- cbind(fuel_quality1,fuel_quality2)
## 2. Part 2: matrix constraint for oil availability.
constraint2 <- matrix(c(rep(eye(length(raw_material$Octane_Rating)),length(gasoline$Gasoline)+1),
zeros(length(raw_material$Octane_Rating),length(gasoline$Octane_Rating))),
nrow = length(raw_material$Octane_Rating),
ncol = (length(raw_material$Octane_Rating) * (length(gasoline$Gasoline)+1)) +
length(gasoline$Gasoline))
## 3. Part 3: matrix constraint for oil quantity.
#* Part 3 (a):
fuel_quantity1=c()
for (row in 1:length(gasoline$Gasoline)) {
for (col in 1:(length(gasoline$Gasoline)+1)) {
if(row == col){
fuel_quantity1<-append(fuel_quantity1,rep(1,length(raw_material$Octane_Rating)))
}
else{
fuel_quantity1<-append(fuel_quantity1,rep(0,length(raw_material$Octane_Rating)))
}
}
}
fuel_quantity1 <- matrix(fuel_quantity1, nrow = length(gasoline$Gasoline),
ncol = length(raw_material$Octane_Rating)*(length(gasoline$Gasoline)+1),
byrow = TRUE)
## Part 3 (b):
fuel_quantity2=c()
for (row in 1:length(gasoline$Gasoline)) {
for (col in 1:length(gasoline$Gasoline)) {
if(row == col){
fuel_quantity2<-append(fuel_quantity2, -1)
}
else{
fuel_quantity2<-append(fuel_quantity2, 0)
}
}
}
fuel_quantity2 <- matrix(fuel_quantity2, nrow = length(gasoline$Gasoline),
ncol = length(gasoline$Octane_Rating), byrow = TRUE)
## part 3 final matrix for fuel quantity
constraint3 <- cbind(fuel_quantity1, fuel_quantity2)
## Final matrix constraint required for optimization.
mat <- rbind(constraint1,
constraint2,
constraint3)
## RHS for the constraints
rhs <- c(zeros(1,length(gasoline$Price)),
raw_material$Avalibality,
zeros(1, length(gasoline$Octane_Rating)))
## Constraints direction
dir  <- c(rep(">=", length(gasoline$Price)),
rep("==", length(raw_material$Avalibality)),
rep("==", length(gasoline$Octane_Rating)))
## solve using Rglpk package for linear programming solver
optimum <- Rglpk_solve_LP(obj, mat, dir, rhs, max = FALSE)
## Find the optimal solution
optimum$solution # Display the optimum values for x1 and x2 and others
optimum$optimum # Check the value of objective function at optimal point
# set fuel_used variable to store the result of gasoline used, obtain from optimum$solution
fuel_used <- data.frame(gasoline$Gasoline, tail(optimum$solution, length(gasoline$Gasoline)))
colnames(fuel_used) <- c("Fuel", "Used_Fuel")
# set revenue variable to store the result of objective function at optimal point
revenue <- data.frame("Revenue"=format(sum(tail(optimum$solution,length(gasoline$Gasoline))*gasoline$Price),
big.mark=",",scientific=FALSE))
# revenue <- data.frame("Revenue" = format(optimum$optimum,big.mark=",",scientific=FALSE))
# set df blend_dist to save on .csv format, which contains the final result of blending process
blend_dist <- data.frame(matrix(
c(raw_material$Octane_Rating,
as.numeric(format(round(optimum$solution[1:(length(raw_material$Octane_Rating)*length(gasoline$Gasoline))])))),
nrow = length(raw_material$Octane_Rating)))
if(length(gasoline$Gasoline) > 1){
blend_dist <- cbind(blend_dist, rowSums(blend_dist[, -1]))
colnames(blend_dist) <- c("Octane_Rating",paste("Fuel_",as.character(gasoline$Gasoline), sep = ""), "Total")
} else {
colnames(blend_dist) <- c("Octane_Rating",paste("Fuel_",as.character(gasoline$Gasoline), sep = ""))
}
# write dataframe in .csv format for blend_graph, fuel_used and revenue
# library(xlsx)
# wb <- loadWorkbook("oil_blend_lp.xlsx")
# sheets <- getSheets(wb)
# removeSheet(wb, sheetName="blend_result")
# mysheet <- createSheet(wb, sheetName="blend_result")
# addDataFrame(blend_dist, mysheet, row.names = FALSE, col.names = TRUE)
# addDataFrame(fuel_used, mysheet, row.names = FALSE, col.names = TRUE, startRow = length(blend_dist$Octane_Rating)+3)
# addDataFrame(revenue, mysheet, row.names = FALSE, col.names = TRUE,
#              startRow = (length(blend_dist$Octane_Rating)+1) + (length(fuel_used$Fuel)+1)+3)
# saveWorkbook(wb, "oil_blend_lp.xlsx")
library(xlsx) # read, write, format Excel.
wb <- loadWorkbook("oil_blend_lp.xlsx")
sheets <- getSheets(wb)
if ("blend_result" %in% names(sheets)) {
removeSheet(wb, sheetName="blend_result")
mysheet <- createSheet(wb, sheetName="blend_result")
} else {
mysheet <- createSheet(wb, sheetName="blend_result")
}
addDataFrame(blend_dist, mysheet, row.names = FALSE, col.names = TRUE)
addDataFrame(fuel_used, mysheet, row.names = FALSE, col.names = TRUE, startRow = length(blend_dist$Octane_Rating)+3)
addDataFrame(revenue, mysheet, row.names = FALSE, col.names = TRUE,
startRow = (length(blend_dist$Octane_Rating)+1) + (length(fuel_used$Fuel)+1)+3)
saveWorkbook(wb, "oil_blend_lp.xlsx")
# created df blend_graph according to ggplot2 requirements
blend_graph <- data.frame(rep(gasoline$Gasoline, each = length(raw_material$Avalibality)),
as.numeric(rep(raw_material$Octane_Rating,time=length(gasoline$Gasoline))),
as.numeric(format(round(optimum$solution[1:(length(raw_material$Octane_Rating)*length(gasoline$Gasoline))]))))
colnames(blend_graph) <- c("Fuel","Octane_Rating","Used_Fuel")
## plot ggplot2 graph for blending process
ggplotly(ggplot(blend_graph, aes(Octane_Rating, Used_Fuel, fill=Fuel)) +
theme(panel.grid.major = element_line(color = "#a09d9a")) +
# facet_wrap(~ Fuel) +
geom_bar(stat='identity', position = 'dodge') +
labs(x = "Ocatane Rating",y = "Fuel Used for Blending",
title = "Blending") +
scale_x_discrete(limits=raw_material$Octane_Rating))
# save plot in png format
ggsave("blend_graph.png")
# Display the final result of blending process along with the revenue
print(blend_dist, print.gap=2, row.names=F)
print(fuel_used, print.gap=2, row.names=F)
print(revenue, print.gap=2, row.names=F)
rJava
install.packages(rJava)
View(raw_material)
order(raw_material[,3], raw_material[,3],)
order(raw_material[,3], raw_material[,3])
order(raw_material[,3])
order(raw_material[,3], raw_material[,2])
order(raw_material[,3], raw_material[,1])
raw_material[order(raw_material[,3], raw_material[,1]),]
raw_material[order(raw_material[,3],]
raw_material[order(raw_material[,3]),]
install.packages("Rglpk")
install.packages("tideyverse")
install.packages("tidyverse")
install.packages("plotely")
install.packages("plotly")
install.packages("pracma")
library(pracma)
eye(5)
install.packages("xlsx")
library(Rglpk) # Linear and Mixed Integer Programming Solver Using GLPK
library(Rglpk) # Linear and Mixed Integer Programming Solver Using GLPK
library(tidyverse) # R package for ggpolot2, dplyr, etc.
library(tidyverse) # R package for ggpolot2, dplyr, etc.
library(reshape2)
library(plotly) # r package for hover effects
## Set the coefficients of the decision variables
obj  <- c(rep(0,4),4000, 3000, 37.5, 28.5)
## Create constraint martix
mat <- matrix(c(-85, -99, rep(-0,4), 93, 0,
rep(-0,2), -85, -99, rep(-0,2), 0, 85,
1,0,1,0,1,0,0,0,
0,1,0,1,0,1,0,0,
1,1,0,0,0,0,-1,0,
0,0,1,1,0,0,0,-1),  nrow=6, byrow=TRUE)
## RHS for the constraints
rhs <- c(0, 0, 4000, 3000, 0, 0)
## Constraints direction
dir  <- c(">=",">=","==","==","==","==")
optimum <- Rglpk_solve_LP(obj, mat, dir, rhs, max = FALSE)
## Find the optimal solution
optimum$solution # Display the optimum values for x1 and x2 and others
optimum$optimum # Check the value of objective function at optimal point
blend_graph <- data.frame(matrix(c(rep(c("A","B"), each = 2),rep(c("85", "99"),2),
optimum$solution[1:4]), nrow = 4))
options(scipen = 100, digits = 4)
colnames(blend_graph) <- c("Fuel","Octane_Rating","Used_Fuel")
blend_graph[,3] <- as.numeric(as.character(blend_graph[,3])) # Transform factor to numeric
blend_graph[,3] <- ceiling(blend_graph$Used_Fuel)
ggplot(blend_graph, aes(Octane_Rating, Used_Fuel, fill=Fuel)) +
theme(panel.grid.major = element_line(color = "red")) +
facet_wrap(~ Fuel) +
geom_bar(stat='identity') +
labs(x = "Ocatane Rating",y = "Fuel Used for Blend",
title = "Blending")
ggplotly(ggplot(blend_graph, aes(Octane_Rating, Used_Fuel, fill=Fuel)) +
theme(panel.grid.major = element_line(color = "red")) +
geom_bar(stat='identity', position='dodge') +
labs(x = "Ocatane Rating",y = "Fuel Used for Blend",
title = "Blending"))
cat(sprintf("
Blending....\n
octane Rating: 85    99 \n
Fuel A:       %g  %g \n
Fuel B:       %g  %g \n
Produced Fuel.... \n
Fuel A: %g\n
Fuel B: %g\n
Revenue: $%s/-\n",
blend_graph[1,3], blend_graph[2,3],
blend_graph[3,3], blend_graph[4,3],
optimum$solution[length(optimum$solution) - 1], optimum$solution[length(optimum$solution)],
format(optimum$optimum,big.mark=",",scientific=FALSE)))
source('~/Oil Blending Linear optimaization/linear_optimize.R')
View(raw_material)
save(raw_material)
save(raw_material, file = "raw.Rdata")
library(grid)
grid.draw(raw_material)
png(filename = )
png(filename = "raw.png")
grid.table(raw_material)
dev.off()
install.packages("gridExtra")
library(gridExtra)
library(gridExtra)
grid.table(raw_material)
grid.table(raw_material)
dev.off()
png(filename = "rawmatrial.png", bg = "white")
grid.table(raw_material)
dev.off()
grid.table(gasoline)
source('~/Oil Blending Linear optimaization/linear_optimize.R')
View(gasoline)
View(raw_material)
View(gasoline)
